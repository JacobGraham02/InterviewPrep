
--  23000 duplicate entry
DELIMITER //
CREATE PROCEDURE SMALL_MISTAKE1
   (OUT ERROR VARCHAR(400))
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLSTATE '23000'
      SET ERROR = 'DONT RUN THIS TWICE';
   SET ERROR = 'Success';
   TRY
   INSERT INTO TEAMS VALUES (2,27,'third');
   {
   CATCH 
    IF ERROR 23000
     CONTINUE
   }  
   SELECT ;
   
   UPDATE STUFF;
   
   DELETE STUFF;
END
//
DELIMITER //
-- 23000 duplicate entry
-- 21S01 statement is bigger or smaller than the number of columns the table has
CREATE PROCEDURE SMALL_MISTAKE2
   (OUT ERROR CHAR(5))
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLSTATE '23000'
      SET ERROR = '23000';
   DECLARE CONTINUE HANDLER FOR SQLSTATE '21S01'
      SET ERROR = '21S01';
   SET ERROR = '00000';
   INSERT INTO TEAMS VALUES (2,27,'third',5);
END

//
DELIMITER //
CREATE PROCEDURE SMALL_MISTAKE3
   (OUT ERROR CHAR(5))
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLWARNING, NOT FOUND, SQLEXCEPTION 
   SET ERROR = 'THERE WAS AN ERROR';
   
   SET ERROR = '00000';
   INSERT INTO TEAMS VALUES (2,27,'third');
   DELETE FROM TEAMS WHERE ID = 3;
   INSERT INTO TEAMS;
   
END

//

DELIMITER //
CREATE PROCEDURE SMALL_MISTAKE4
   (OUT ERROR CHAR(5))
BEGIN
   DECLARE NON_UNIQUE CONDITION FOR SQLSTATE '23000';
   DECLARE CONTINUE HANDLER FOR NON_UNIQUE
      SET ERROR = '23000';
   SET ERROR = '00000';
   INSERT INTO TEAMS VALUES (2,27,'third');
END
//

DELIMITER //
CREATE PROCEDURE SMALL_MISTAKE5
   (OUT ERROR CHAR(5))
BEGIN
   DECLARE NON_UNIQUE CONDITION FOR SQLSTATE '23000';
   DECLARE CONTINUE HANDLER FOR NON_UNIQUE
      SET ERROR = '23000';
   BEGIN
   {
      DECLARE CONTINUE HANDLER FOR NON_UNIQUE
		 BEGIN
			SET ERROR = '23000';
            INSERT INTO PLAYERS_LOG( ERROR, DATETIME)
		END 
   }
   END;
   BEGIN
      DECLARE CONTINUE HANDLER FOR NON_UNIQUE
         SET ERROR = '00000';
      INSERT INTO TEAMS VALUES (2,27,'third');
   END;
END
//





DELIMITER //

CREATE PROCEDURE P_TEST ()
BEGIN

-- DEFINE VARIABLES
-- DEFINE CURSOR
-- DEFINE LOOP
-- GET RECORDS
-- END
DECLARE N_PLAYERNO int;
DECLARE N_NAME  VARCHAR;
DECLARE N_BIRTH DATE;

DECLARE C_PLAYERS CURSOR FOR
      SELECT PLAYERNO, NAME, BIRTHDATE FROM PLAYERS;
      
OPEN C_PLAYERS;



LOOP
	FETCH C_PLAYERS INTO N_PLAYERNO, N_NAME, N_BIRTHDATE
    IF SUBSTRING(NAME,1) = 'P'
		do something
	end if;
END LOOP
      


END

//







DELIMITER //

CREATE PROCEDURE NUMBER_OF_PLAYERS
   (OUT NUMBER INTEGER)
BEGIN
  1.  DECLARE C_PLAYERS CURSOR FOR
      SELECT PLAYERNO FROM PLAYERS;
  2. DECLARE A_PLAYERNO INTEGER;
  
  3.  DECLARE FOUND BOOLEAN DEFAULT TRUE;
  
  4. DECLARE CONTINUE HANDLER FOR NOT FOUND
      SET FOUND = FALSE;
      
  5. OPEN C_PLAYERS;
  
  6. FETCH C_PLAYERS INTO A_PLAYERNO;
  
  7. LOOP THROUGH DATA WITH A FETCH IN THE LOOP
  
  8. CLOSE C_PLAYERS;
  
   -- This variable is needed to switch to false once it reaches the end of the records
  
  
      -- this handler fires when the last record is reached
   
   SET NUMBER = 0;
   
   
   WHILE FOUND DO
      SET NUMBER = NUMBER + 1;
      FETCH C_PLAYERS INTO A_PLAYERNO;
   END WHILE;
   
END
//



DELIMITER //
CREATE PROCEDURE DELETE_OLDER_THAN_30()
BEGIN
   DECLARE V_AGE, V_PLAYERNO,V_YEARS,
      V_MONTHS, V_DAYS INTEGER;
   DECLARE V_BIRTH_DATE DATE;
   DECLARE FOUND BOOLEAN DEFAULT TRUE;
   DECLARE C_PLAYERS CURSOR FOR
      SELECT PLAYERNO, BIRTH_DATE
      FROM   PLAYERS;
   DECLARE CONTINUE HANDLER FOR NOT FOUND
      SET FOUND = FALSE;
   OPEN C_PLAYERS;
   FETCH C_PLAYERS INTO V_PLAYERNO, V_BIRTH_DATE;
   WHILE FOUND DO
      CALL AGE (V_BIRTH_DATE, NOW(), V_YEARS, V_MONTHS, V_DAYS);
      IF V_YEARS > 30 THEN
         DELETE FROM PENALTIES WHERE PLAYERNO = 6;
      END IF;
      FETCH C_PLAYERS INTO V_PLAYERNO, V_BIRTH_DATE;
   END WHILE;
   CLOSE C_PLAYERS;
END
//
 
DELIMITER //
CREATE PROCEDURE TOP_THREE
   (IN P_PLAYERNO INTEGER,
    OUT OK BOOLEAN)
BEGIN
   DECLARE A_PLAYERNO, BALANCE, SEQNO INTEGER;
   DECLARE FOUND BOOLEAN;
   DECLARE BALANCE_PLAYERS CURSOR FOR
      SELECT   PLAYERNO, SUM(WON) - SUM(LOST)
      FROM     MATCHES
      GROUP BY PLAYERNO
      ORDER BY 2;
   DECLARE CONTINUE HANDLER FOR NOT FOUND
      SET FOUND = FALSE;
   SET SEQNO = 0;
   SET FOUND = TRUE;
   SET OK = FALSE;
   OPEN BALANCE_PLAYERS;
   FETCH BALANCE_PLAYERS INTO A_PLAYERNO, BALANCE;
   WHILE FOUND AND SEQNO < 3 AND OK = FALSE DO
      SET SEQNO = SEQNO + 1;
      IF A_PLAYERNO = P_PLAYERNO THEN
         SET OK = TRUE;
      END IF;
      FETCH BALANCE_PLAYERS INTO A_PLAYERNO, BALANCE;
   END WHILE;
   CLOSE BALANCE_PLAYERS;
END
//
